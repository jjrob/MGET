name: Build

on: [push, pull_request]

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        # Python versions are specified in pyproject.toml

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel==2.21.1

      - name: Build and test wheels
        run: python -m cibuildwheel --output-dir wheelhouse
        env:
          CIBW_ARCHS: "auto64"

      - uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Build sdist
        run: pipx run build --sdist

      - uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist/*.tar.gz

  test_wheels:
    name: Test wheel on ${{ matrix.os }} ${{ matrix.python-version }}
    needs: build_wheels
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.12"]

    steps:
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Display system information
        run: |
          echo "uname -a:"
          uname -a
          echo ""
          echo "hostnamectl:"
          hostnamectl
          echo ""
          echo "python3 --version:"
          python3 --version

      - name: Dispaly GDAL versions available for installation
        run: |
          apt-cache policy gdal-bin gdal-data gdal-plugins libgdal-dev 

      - name: Install GDAL
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: gdal-bin gdal-data gdal-plugins libgdal-dev   # Only install these, not the rest
          version: 1.0
          execute_install_scripts: true    # Not sure if this is needed for gdal

      - name: Install Python packages needed to install GDAL's Python bindings
        run: |
          python -m pip install --upgrade pip
          python -m pip install "numpy<2" setuptools wheel

      - name: Install GDAL's Python package
        run: |
          GDAL_VERSION_NEEDED=$(gdalinfo --version | awk '{print $2}' | sed 's/,//')
          python -m pip install gdal==$GDAL_VERSION_NEEDED
          echo ""
          echo "Testing GDAL's python bindings"
          python -c "from osgeo import _gdal_array"

      - name: Download built wheels
        uses: actions/download-artifact@v4
        with:
          name: cibw-wheels-ubuntu-latest
          path: ./wheels

      - name: Installing wheel
        run: |
          GEOECO_VERSION=$(ls ./wheels | grep -m 1 mget3 | sed 's/.*mget3-\(.*\)-cp.*-cp.*.whl/\1/')
          python -m pip install mget3==$GEOECO_VERSION --find-links=./wheels
